<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>V3IO Frames Python API Reference on Iguazio MLOps Platform Documentation</title><link>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/</link><description>Recent content in V3IO Frames Python API Reference on Iguazio MLOps Platform Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/index.xml" rel="self" type="application/rss+xml"/><item><title>Attribute Data Types</title><link>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/attribute-data-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/attribute-data-types/</guid><description>V3IO Frames currently supports item attributes (DataFrame columns) of the following pandas DataFrame (NumPy) data types. For a description of the DataFrame types, see the pandas and NumPy documentation. For a general reference of the attribute data types that are supported in the platform, see the Attribute Data Types Reference.
NoteThe platform implicitly converts between pandas DataFrame column data types and platform table-schema attribute data types, and converts integer and short values (int&amp;lt;n&amp;gt;) to long values (int64 / &amp;quot;long&amp;quot;) and floating-point values (float&amp;lt;n&amp;gt;) to double-precision values (float64 / &amp;quot;double&amp;quot;).</description></item><item><title>Client Constructor</title><link>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/client-constructor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/client-constructor/</guid><description>Description All Frames operations are executed via an object of the Client class, which is created by using the Client constructor.
Syntax Client(address=&amp;#34;&amp;#34;, container=&amp;#34;&amp;#34;[, data_url=&amp;#34;&amp;#34;, user=&amp;#34;&amp;#34;, password=&amp;#34;&amp;#34;, token=&amp;#34;&amp;#34;]) Parameters and Data Members address | container | data_url | password | token | user
address The address of the Frames service. When running locally on the platform, set this parameter to &amp;quot;framesd:8081&amp;quot; for a gRPC client (recommended) or to &amp;quot;http://framesd:8080&amp;quot; for an HTTP client.</description></item><item><title>Overview of the Frames API</title><link>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/ghpages-doc-site/data-layer/reference/frames/overview/</guid><description>Introduction Iguazio V3IO Frames (&amp;quot;Frames&amp;quot;) is a multi-model open-source data-access library that provides a unified high-performance DataFrame API for working with NoSQL (key-value) and time-series (TSDB) data in the data store of the MLOps Platform (&amp;quot;the platform&amp;quot;). This reference describes the library's DataFrame API for Python 3.7. See also the Frames restrictions in the Software Specifications and Restrictions documentation.
In addition to the examples provided in this reference, you can find many examples of using the Frames API in the platform's tutorial Jupyter notebooks.</description></item></channel></rss>