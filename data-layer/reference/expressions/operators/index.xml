<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Expression Operators on Iguazio MLOps Platform Documentation</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/</link><description>Recent content in Expression Operators on Iguazio MLOps Platform Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/index.xml" rel="self" type="application/rss+xml"/><item><title>Arithmetic Operators</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/arithmetic-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/arithmetic-operators/</guid><description>The following binary arithmetic operators are supported in expressions. The operands are numeric.
Addition Operator (+) OPERAND-A + OPERAND-B The addition operator (+) adds up the values of the two operands, and returns the sum.
Division Operator (/) OPERAND-A / OPERAND-B The division operator (/) divides the left operand (OPERAND-A) by the right operand (OPERAND-B), and returns the product.
Multiplication Operator (*) OPERAND-A * OPERAND-B The multiplication operator (*) multiplies the values of the operands, and returns the result.</description></item><item><title>Array Operator ([ ])</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/array-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/array-operator/</guid><description>Overview The platform enables you to define array attributes — blob attributes that represent numeric arrays of 64-bit integer or double values. See Array-Attribute Expression Variables. You can use one of the following syntax variations of the array operator ([]) to reference specific elements of an array attribute in expressions. In all variations, an element's index number can also be provided as an expression that evaluates to an integer.
NoteIn the current release, the support for array attributes and the use of array operators and functions in expressions is restricted to the web APIs.</description></item><item><title>Assignment Operator (=)</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/assignment-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/assignment-operator/</guid><description>OPERAND-A = OPERAND-B The assignment operator (=) is used in SET update expressions to assign the value of the right operand (OPERAND-B) to the left operand (OPERAND-A). The left operand should be either an attribute variable (ATTRIBUTE) or an element of an array attribute variable (ATTRIBUTE[i]).
NoteIn the current release, the support for array attributes and the use of array operators and functions in expressions is restricted to the web APIs.</description></item><item><title>Bitwise Operators</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/bitwise-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/bitwise-operators/</guid><description>The following bitwise operators are supported in expressions. The operands are numeric, and the result is a binary number.
Binary Bitwise Operators Bitwise AND Operator (&amp;amp;) OPERAND-A &amp;amp; OPERAND-B The bitwise AND operator (&amp;amp;) sets a result bit to 1 if the corresponding bit in both operands is 1; otherwise, sets the result bit to 0.
Bitwise OR Operator (|) The bitwise OR operator (|) sets a result bit to 1 if the corresponding bit in either of the operands is 1; otherwise, sets the result bit to 0.</description></item><item><title>Comparison Operators</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/comparison-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/comparison-operators/</guid><description>The following binary comparison operators are supported in expressions. The operands can be numeric or strings. Strings are compared using lexicographic string comparison.
NoteIf the operands cannot be compared (for example, when comparing attributes of different types), the comparison evaluates to false. Equality Operators Equality Operator (==) OPERAND-A == OPERAND-B The equality operator (==) returns true if the operands are equal; otherwise, returns false.
Inequality Operator (!=) The inequality operator (!</description></item><item><title>IN Operator</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/in-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/in-operator/</guid><description>OPERAND-A IN (OPERAND-B) The IN operator checks whether OPERAND-A is found in OPERAND-B, where OPERAND-B is a comma-separated list of 1–1024 values (or expressions). OPERAND-A and the members of OPERAND-B should be of the same type — either strings or integers.
For example, &amp;quot;genre IN ('Rock', 'Blues', 'R&amp;amp;B')&amp;quot; checks whether the value of a &amp;quot;genre&amp;quot; string attribute is identical to one of the genre strings in OPERAND-B (&amp;quot;Rock&amp;quot;, &amp;quot;Blues&amp;quot;, or &amp;quot;R&amp;amp;B&amp;quot;).</description></item><item><title>Logical Operators</title><link>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/logical-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://github.com/jasonnIguazio/data-layer/reference/expressions/operators/logical-operators/</guid><description>The following binary logical operators are supported in expressions. The operands are Boolean.
Note Use the literal operator names — AND, OR, or NOT — and not the operator signs that are commonly associated with these operators. The names of the logical expression operators are reserved names in the platform. For more information, see Reserved Names. Binary Logical Operators Logical AND Operator OPERAND-A AND OPERAND-B The logical AND operator returns true if both operands are true; otherwise, returns false.</description></item></channel></rss>